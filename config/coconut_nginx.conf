# coconut_nginx.conf

# the upstream component nginx needs to connect to
upstream django_app {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).

    server unix:/home/salvacarrion/Coconut/mycoconut/run/gunicorn.sock fail_timeout=0; # for a file socket
    # server 127.0.0.1:8001 fail_timeout=0; # for a web port socket (we'll use this first)
}


# Redirect from HTTP to HTTPS
server {
    if ($host = dev.aponti.es) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80 ;
    listen [::]:80 ;
    server_name dev.aponti.es;
    return 404; # managed by Certbot
}


# Configuration of the server
# (Letencrypt certificates doesn't work with bare IPs, and self-signed ssl
#  certificate are not trust by most browsers)
server {
    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot

    # SSL certificate
    ssl_certificate /etc/letsencrypt/live/dev.aponti.es/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/dev.aponti.es/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    server_name dev.aponti.es;
    charset     utf-8;

    # max upload size
    client_max_body_size 3M;   # adjust to taste

    access_log /home/salvacarrion/Coconut/mycoconut/logs/nginx-access.log;
    error_log /home/salvacarrion/Coconut/mycoconut/logs/nginx-error.log;

    location ~ /.well-known {
        allow all;
    }

    # Django media
    location /media  {
        alias /home/salvacarrion/Coconut/mycoconut/media;  # your Django project's media files - amend as required
    }

    location /static {
        alias /home/salvacarrion/Coconut/mycoconut/static; # your Django project's static files - amend as required
    }

    location ~* \.(jpe?g|png|gif|ico|svg)$ {
        expires 7d;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

    location ~* \.(css|js)$ {
        expires 1h;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

    # Finally, send all non-media requests to the Django server.
    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://django_app;
            break;
        }
    }
}
